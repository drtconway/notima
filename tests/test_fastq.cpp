#define CATCH_CONFIG_MAIN

#include "catch.hpp"
#include <fastq.hpp>
#include <sstream>

namespace // anonymous
{
    std::string fq_str(
        "@M00139:329:000000000-AN968:1:2105:16049:1343 1:N:0:GTTCGATTGT\n"
        "GCCTGCAGAACAGAGCATTTGATGACGAATTAGGGCTTGGTGGCTCATGCCCTCCTATGAGGGAAAGTGATACTAGACAAGAAAACTTGAAAACCAAGGCTCTCGTTTCTAACAGTTCTTTGCATTGGATACCCATCCCATCGAATGATGAGGT\n"
        "+\n"
        "ABBBBFFFFFFCGFGGGGFGGFDFHHCFAHHFHHHHHGGGGFGHGHFHHHHHHHGHHHHHHGGGHGHGFHGHHHHHGHHHHGGHHFHGGHHHHHGHHHFHHGHHGGGGHHHHHGHHHHHFHHHHHHHHHFGGFHHHHHHHHHFGHHHHHHHHHF\n"
        "@M00139:329:000000000-AN968:1:2105:15810:1362 1:N:0:GTTCGATTGT\n"
        "TGATGATGCTGATAATGCCAGTAAACTAGCTGCAATGCTAAATACCTGTTCCTTTCAGAAACCAGAACAACTACGACAACAAAAATCAGTTTTTGAGATATGCCCATCTCCTGCAGAAAATAACATCCAGGGAACCACAAAGCTAGCGTCTGGT\n"
        "+\n"
        "CCCCCFFFFFFBFGGGGGGGGGHHGHGHHHHHHHHHGHHHHHHHHHHHGHHHHHHHGHHHHHHHHHHHHGHHHHGGGGGHHHHHGHHHHGHHHGGGFEHHHHGHHHHHHHHHHHHHHHGGHHHHHHHGHHGGGHGGGGHHHGHHHHHGGGGGHG\n"
    );
}
// namespace anonymous

TEST_CASE("Test fastq constructor", "[fastq-test]")
{
    notima::fastq x;
    REQUIRE(std::get<0>(x) == "");
    REQUIRE(std::get<1>(x) == "");
    REQUIRE(std::get<2>(x) == "");
    REQUIRE(std::get<3>(x) == "");
}

TEST_CASE("Test fastq read", "[fastq-test]")
{
    std::istringstream inp(fq_str);

    notima::fastq x;
    REQUIRE(x.read(inp));
    REQUIRE(std::get<0>(x) == "@M00139:329:000000000-AN968:1:2105:16049:1343 1:N:0:GTTCGATTGT");
    REQUIRE(std::get<1>(x) == "GCCTGCAGAACAGAGCATTTGATGACGAATTAGGGCTTGGTGGCTCATGCCCTCCTATGAGGGAAAGTGATACTAGACAAGAAAACTTGAAAACCAAGGCTCTCGTTTCTAACAGTTCTTTGCATTGGATACCCATCCCATCGAATGATGAGGT");
    REQUIRE(std::get<2>(x) == "+");
    REQUIRE(std::get<3>(x) == "ABBBBFFFFFFCGFGGGGFGGFDFHHCFAHHFHHHHHGGGGFGHGHFHHHHHHHGHHHHHHGGGHGHGFHGHHHHHGHHHHGGHHFHGGHHHHHGHHHFHHGHHGGGGHHHHHGHHHHHFHHHHHHHHHFGGFHHHHHHHHHFGHHHHHHHHHF");
    REQUIRE(x.read(inp));
    REQUIRE(std::get<0>(x) == "@M00139:329:000000000-AN968:1:2105:15810:1362 1:N:0:GTTCGATTGT");
    REQUIRE(!x.read(inp));
}

TEST_CASE("Test gzip fastq read", "[fastq-test]")
{
    {
        notima::gzip::output out("x.fq.gz");
        out.write(fq_str);
    }

    notima::gzip::input inp("x.fq.gz");

    notima::fastq x;
    REQUIRE(x.read(inp));
    REQUIRE(std::get<0>(x) == "@M00139:329:000000000-AN968:1:2105:16049:1343 1:N:0:GTTCGATTGT");
    REQUIRE(std::get<1>(x) == "GCCTGCAGAACAGAGCATTTGATGACGAATTAGGGCTTGGTGGCTCATGCCCTCCTATGAGGGAAAGTGATACTAGACAAGAAAACTTGAAAACCAAGGCTCTCGTTTCTAACAGTTCTTTGCATTGGATACCCATCCCATCGAATGATGAGGT");
    REQUIRE(std::get<2>(x) == "+");
    REQUIRE(std::get<3>(x) == "ABBBBFFFFFFCGFGGGGFGGFDFHHCFAHHFHHHHHGGGGFGHGHFHHHHHHHGHHHHHHGGGHGHGFHGHHHHHGHHHHGGHHFHGGHHHHHGHHHFHHGHHGGGGHHHHHGHHHHHFHHHHHHHHHFGGFHHHHHHHHHFGHHHHHHHHHF");
    REQUIRE(x.read(inp));
    REQUIRE(std::get<0>(x) == "@M00139:329:000000000-AN968:1:2105:15810:1362 1:N:0:GTTCGATTGT");
    REQUIRE(!x.read(inp));
}
